Exp7
Aim: To understand Static Analysis SAST process and learn to integrate Jenkins SAST to SonarQube/GitLab.

Steps:
1. Install and configure a Jenkins and SonarQube CICD environment using Docker containers.
Installation of Jenkins:

wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -

sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'

sudo apt update

sudo apt install jenkins

sudo systemctl start jenkins

sudo systemctl status jenkins

2. Opening the Firewall
sudo ufw allow 8080

Setting Up Jenkins:
http://your_server_ip_or_domain:8080

In the terminal window, use the cat command to display the password:
sudo cat /var/lib/jenkins/secrets/initialAdminPassword

Copy the 32-character alphanumeric password from the terminal and paste it into the
Administrator password field, then click Continue.

The next screen presents the option of installing suggested plugins or selecting specific plugins: We’ll click the Install suggested plugins option, which will immediately begin the installation process.

When the installation is complete, you will be prompted to set up the first administrative user. It’s possible to skip this step and continue as admin using the initial password we used above, but we’ll take a moment to create the user.

3. SonarQube Setup
sudo docker run -d -p 9000:9000 SonarQube

In the above command, we are forwarding port 9000 of the container to the port 9000 of the host machine as SonarQube is will run on port 9000. Then, from the browser, enter http://localhost:9000. After That, you will see the SonarQube is running. Then, login using default credentials (admin:admin).

4. Generate User Token
Now, we need to get the SonarQube user token to make connection between Jenkins and SonarQube. For the same, go to Administration> User > My Account > Security and then, from the bottom of the page you can create new tokens by clicking the Generate Button. Copy the Token and keep it safe.



2) Configure Jenkins with the SonarQube Scanner plugin for automated static
code analysis.
Jenkins Setup for SonarQube
Before all, we need to install the SonarQube Scanner plugin in Jenkins. For the same, go to Manage Jenkins > Plugin Manager > Available. From here, type SonarQube Scanner then select and install.


a. Tool Configuration SonarQube Scanner
Now, we need to configure the Jenkins plugin for SonarQube Scanner to make a connection with the SonarQube Instance. For that, got to Manage Jenkins > Configure System > SonarQube Server. Then, Add SonarQube. In this, give the Installation Name, Server URL then Add the Authentication token in the Jenkins Credential Manager and select the same in the configuration.

Then, we need to set-up the SonarQube Scanner to scan the source code in the various stage. For the same, go to Manage Jenkins > Global Tool Configuration > SonarQube Scanner. Then, Click Add SonarQube Scanner Button. From there, give some name of the scanner type and Add Installer of your choice. In this case, I have selected SonarQube Scanner from Maven Central.

b. SonarQube Scanner in Jenkins Pipeline
Now, It’s time to integrate the SonarQube Scanner in the Jenkins Pipeline. For the same, we are going to add one more stage in the Jenkinsfile called SonarQube and inside that, I am adding the following settings and code.

Create the Jenkins Pipeline
This section follows pages 12-15 of your manual.
Create a New Job:
From the main Jenkins dashboard, click New Item.
Enter an item name: SonarQube.
Select Pipeline and click OK.
Configure the Pipeline:
On the configuration page, under the General tab, check the GitHub project box.
In the Project url field, enter: https://github.com/vishal003/jenkins-sonarqube.

Scroll down to the Pipeline section.

Make sure the Definition is set to Pipeline script.
In the Script text box, copy and paste the Groovy code exactly from your manual :


node{

    stage('cloning from git'){
        git branch: 'main', credentialsID: 'GIT REPO', url: 'https://github.com/vishal003/jenkins-sonarqube'
    }
}

Click Save.

Run the Pipeline:
You will be taken to the job's page. Click Build Now on the left menu.

A build will start. You can click on the build number (e.g., #1) and then click Console Output to view the log.
You should see it clone the repository and finish with Finished: SUCCESS.
As your manual concludes, you have successfully installed Jenkins and SonarQube and created a CI pipeline using a GitHub repository.




