Experiment 4: Create a Two-Node Kubernetes Cluster on AWS EC2 (One Master, One Worker)

Step 1: Launch Your Two EC2 Instances
Go to EC2 service in AWS Console → Click Launch instances.
Number of instances: 2
Name and tags:
Click Add additional tags.
Key: Name
Value: k8s-node
Application and OS Images:
Select Ubuntu Server 24.04 LTS (HVM) — must say Free tier eligible.
Instance type:
Select t2.micro (Free tier eligible).
Key pair (login):
Create new key pair.
Key pair name: impskey
Private key file format: .pem
Click Create key pair and save the file securely.
Network settings (Security Group):
Click Edit.
Security group name: k8s-sg
Inbound rules:
Rule 1:
Type: SSH
Source type: My IP
Rule 2:
Type: All traffic
Source type: Custom → select your new security group.
Configure storage:
Change from default 8 GiB to 10 GiB.
Total = 2 × 10 GiB = 20 GiB (within Free Tier limit).
Summary:
Confirm 2 instances, type t2.micro, 10 GiB storage each.
Click Launch instance.



Step 2: Connect to Both Instances
Go to Instances list → You will see two k8s-node instances.
Rename them:
First instance → master
Second instance → slave
Open two terminal windows (one for each).
In Terminal 1 (Master):
Select master instance → Click Connect.
Run: export PS1='ubuntu@master:~$ '
In Terminal 2 (Slave):
Select slave instance → Click Connect.
Run: export PS1='ubuntu@slave:~$ '



Step 3: Install Kubernetes on BOTH Nodes
Run the following commands on both master and slave:
# 1. Update the system
sudo apt-get update
sudo apt-get install -y apt-transport-https ca-certificates curl gpg

# 2. Install Docker
sudo apt-get install -y docker.io
sudo systemctl enable docker
sudo systemctl start docker

# 3. Add Kubernetes repository
sudo curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

# 4. Install kubelet, kubeadm, kubectl
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

# 5. Disable swap
sudo swapoff -a
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

# 6. Configure system for networking
sudo modprobe br_netfilter
sudo sysctl -w net.bridge.bridge-nf-call-iptables=1
sudo sysctl -w net.ipv4.ip_forward=1



Step 4: Initialize the Master Node
Run only on master:
sudo kubeadm config images pull
sudo kubeadm init --pod-network-cidr=10.244.0.0/16 --ignore-preflight-errors=NumCPU,Mem

When initialization completes:
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

Install Flannel network:
kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml

Check node status:
kubectl get nodes



Step 5: Join the Slave Node
Copy the kubeadm join command displayed in the master output.
On the slave terminal, run:
sudo kubeadm join <paste-the-rest-of-the-command-here>



Step 6: Verify Your Cluster
On master terminal, run:
kubectl get nodes
